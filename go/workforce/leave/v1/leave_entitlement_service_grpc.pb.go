// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: workforce/leave/v1/leave_entitlement_service.proto

package leavev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	LeaveEntitlementService_GetLeaveEntitlement_FullMethodName = "/workforce.leave.v1.LeaveEntitlementService/GetLeaveEntitlement"
)

// LeaveEntitlementServiceClient is the client API for LeaveEntitlementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LeaveEntitlementServiceClient interface {
	GetLeaveEntitlement(ctx context.Context, in *GetLeaveEntitlementRequest, opts ...grpc.CallOption) (*GetLeaveEntitlementResponse, error)
}

type leaveEntitlementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLeaveEntitlementServiceClient(cc grpc.ClientConnInterface) LeaveEntitlementServiceClient {
	return &leaveEntitlementServiceClient{cc}
}

func (c *leaveEntitlementServiceClient) GetLeaveEntitlement(ctx context.Context, in *GetLeaveEntitlementRequest, opts ...grpc.CallOption) (*GetLeaveEntitlementResponse, error) {
	out := new(GetLeaveEntitlementResponse)
	err := c.cc.Invoke(ctx, LeaveEntitlementService_GetLeaveEntitlement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LeaveEntitlementServiceServer is the server API for LeaveEntitlementService service.
// All implementations must embed UnimplementedLeaveEntitlementServiceServer
// for forward compatibility
type LeaveEntitlementServiceServer interface {
	GetLeaveEntitlement(context.Context, *GetLeaveEntitlementRequest) (*GetLeaveEntitlementResponse, error)
	mustEmbedUnimplementedLeaveEntitlementServiceServer()
}

// UnimplementedLeaveEntitlementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedLeaveEntitlementServiceServer struct {
}

func (UnimplementedLeaveEntitlementServiceServer) GetLeaveEntitlement(context.Context, *GetLeaveEntitlementRequest) (*GetLeaveEntitlementResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeaveEntitlement not implemented")
}
func (UnimplementedLeaveEntitlementServiceServer) mustEmbedUnimplementedLeaveEntitlementServiceServer() {
}

// UnsafeLeaveEntitlementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LeaveEntitlementServiceServer will
// result in compilation errors.
type UnsafeLeaveEntitlementServiceServer interface {
	mustEmbedUnimplementedLeaveEntitlementServiceServer()
}

func RegisterLeaveEntitlementServiceServer(s grpc.ServiceRegistrar, srv LeaveEntitlementServiceServer) {
	s.RegisterService(&LeaveEntitlementService_ServiceDesc, srv)
}

func _LeaveEntitlementService_GetLeaveEntitlement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaveEntitlementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeaveEntitlementServiceServer).GetLeaveEntitlement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: LeaveEntitlementService_GetLeaveEntitlement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeaveEntitlementServiceServer).GetLeaveEntitlement(ctx, req.(*GetLeaveEntitlementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LeaveEntitlementService_ServiceDesc is the grpc.ServiceDesc for LeaveEntitlementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LeaveEntitlementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "workforce.leave.v1.LeaveEntitlementService",
	HandlerType: (*LeaveEntitlementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLeaveEntitlement",
			Handler:    _LeaveEntitlementService_GetLeaveEntitlement_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "workforce/leave/v1/leave_entitlement_service.proto",
}
