// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: account/tenant/v1/tenant_service.proto
// Protobuf Java Version: 4.27.0

package com.github.vnworkday.proto.account.tenant.v1;

/**
 * <pre>
 * For listing tenants.
 * </pre>
 *
 * Protobuf type {@code account.tenant.v1.ListTenantsRequest}
 */
public final class ListTenantsRequest extends
    com.google.protobuf.GeneratedMessage implements
    // @@protoc_insertion_point(message_implements:account.tenant.v1.ListTenantsRequest)
    ListTenantsRequestOrBuilder {
private static final long serialVersionUID = 0L;
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 0,
      /* suffix= */ "",
      ListTenantsRequest.class.getName());
  }
  // Use ListTenantsRequest.newBuilder() to construct.
  private ListTenantsRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
    super(builder);
  }
  private ListTenantsRequest() {
    filters_ = java.util.Collections.emptyList();
    sorts_ = java.util.Collections.emptyList();
  }

  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.github.vnworkday.proto.account.tenant.v1.TenantServiceProto.internal_static_account_tenant_v1_ListTenantsRequest_descriptor;
  }

  @java.lang.Override
  protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.github.vnworkday.proto.account.tenant.v1.TenantServiceProto.internal_static_account_tenant_v1_ListTenantsRequest_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest.class, com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest.Builder.class);
  }

  private int bitField0_;
  public static final int INFO_FIELD_NUMBER = 1;
  private com.github.vnworkday.proto.shared.v1.RequestInfo info_;
  /**
   * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
   * @return Whether the info field is set.
   */
  @java.lang.Override
  public boolean hasInfo() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
   * @return The info.
   */
  @java.lang.Override
  public com.github.vnworkday.proto.shared.v1.RequestInfo getInfo() {
    return info_ == null ? com.github.vnworkday.proto.shared.v1.RequestInfo.getDefaultInstance() : info_;
  }
  /**
   * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
   */
  @java.lang.Override
  public com.github.vnworkday.proto.shared.v1.RequestInfoOrBuilder getInfoOrBuilder() {
    return info_ == null ? com.github.vnworkday.proto.shared.v1.RequestInfo.getDefaultInstance() : info_;
  }

  public static final int PAGINATION_FIELD_NUMBER = 2;
  private com.github.vnworkday.proto.shared.v1.RequestPagination pagination_;
  /**
   * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
   * @return Whether the pagination field is set.
   */
  @java.lang.Override
  public boolean hasPagination() {
    return ((bitField0_ & 0x00000002) != 0);
  }
  /**
   * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
   * @return The pagination.
   */
  @java.lang.Override
  public com.github.vnworkday.proto.shared.v1.RequestPagination getPagination() {
    return pagination_ == null ? com.github.vnworkday.proto.shared.v1.RequestPagination.getDefaultInstance() : pagination_;
  }
  /**
   * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
   */
  @java.lang.Override
  public com.github.vnworkday.proto.shared.v1.RequestPaginationOrBuilder getPaginationOrBuilder() {
    return pagination_ == null ? com.github.vnworkday.proto.shared.v1.RequestPagination.getDefaultInstance() : pagination_;
  }

  public static final int FILTERS_FIELD_NUMBER = 3;
  @SuppressWarnings("serial")
  private java.util.List<com.github.vnworkday.proto.shared.v1.RequestFilter> filters_;
  /**
   * <pre>
   * Optional. Filters to apply to the list of tenants.
   * If multiple filters are specified, they are combined with AND.
   * Supported filters:
   * - name: The name of the tenant.
   * - domain: The domain of the tenant.
   * - timezone: The timezone of the tenant.
   * - subscription_type: The subscription type of the tenant.
   * - self_registration_enabled: Whether self-registration is enabled for the tenant.
   * - status: The status of the tenant.
   * </pre>
   *
   * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
   */
  @java.lang.Override
  public java.util.List<com.github.vnworkday.proto.shared.v1.RequestFilter> getFiltersList() {
    return filters_;
  }
  /**
   * <pre>
   * Optional. Filters to apply to the list of tenants.
   * If multiple filters are specified, they are combined with AND.
   * Supported filters:
   * - name: The name of the tenant.
   * - domain: The domain of the tenant.
   * - timezone: The timezone of the tenant.
   * - subscription_type: The subscription type of the tenant.
   * - self_registration_enabled: Whether self-registration is enabled for the tenant.
   * - status: The status of the tenant.
   * </pre>
   *
   * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.vnworkday.proto.shared.v1.RequestFilterOrBuilder> 
      getFiltersOrBuilderList() {
    return filters_;
  }
  /**
   * <pre>
   * Optional. Filters to apply to the list of tenants.
   * If multiple filters are specified, they are combined with AND.
   * Supported filters:
   * - name: The name of the tenant.
   * - domain: The domain of the tenant.
   * - timezone: The timezone of the tenant.
   * - subscription_type: The subscription type of the tenant.
   * - self_registration_enabled: Whether self-registration is enabled for the tenant.
   * - status: The status of the tenant.
   * </pre>
   *
   * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
   */
  @java.lang.Override
  public int getFiltersCount() {
    return filters_.size();
  }
  /**
   * <pre>
   * Optional. Filters to apply to the list of tenants.
   * If multiple filters are specified, they are combined with AND.
   * Supported filters:
   * - name: The name of the tenant.
   * - domain: The domain of the tenant.
   * - timezone: The timezone of the tenant.
   * - subscription_type: The subscription type of the tenant.
   * - self_registration_enabled: Whether self-registration is enabled for the tenant.
   * - status: The status of the tenant.
   * </pre>
   *
   * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
   */
  @java.lang.Override
  public com.github.vnworkday.proto.shared.v1.RequestFilter getFilters(int index) {
    return filters_.get(index);
  }
  /**
   * <pre>
   * Optional. Filters to apply to the list of tenants.
   * If multiple filters are specified, they are combined with AND.
   * Supported filters:
   * - name: The name of the tenant.
   * - domain: The domain of the tenant.
   * - timezone: The timezone of the tenant.
   * - subscription_type: The subscription type of the tenant.
   * - self_registration_enabled: Whether self-registration is enabled for the tenant.
   * - status: The status of the tenant.
   * </pre>
   *
   * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
   */
  @java.lang.Override
  public com.github.vnworkday.proto.shared.v1.RequestFilterOrBuilder getFiltersOrBuilder(
      int index) {
    return filters_.get(index);
  }

  public static final int SORTS_FIELD_NUMBER = 4;
  @SuppressWarnings("serial")
  private java.util.List<com.github.vnworkday.proto.shared.v1.RequestSort> sorts_;
  /**
   * <pre>
   * Optional. Sorts to apply to the list of tenants.
   * If multiple sorts are specified, they are applied in the order given.
   * Supported sorts:
   * - name
   * - domain
   * - timezone
   * - subscription_type
   * - self_registration_enabled
   * - status
   * - created_at
   * - updated_at
   * </pre>
   *
   * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
   */
  @java.lang.Override
  public java.util.List<com.github.vnworkday.proto.shared.v1.RequestSort> getSortsList() {
    return sorts_;
  }
  /**
   * <pre>
   * Optional. Sorts to apply to the list of tenants.
   * If multiple sorts are specified, they are applied in the order given.
   * Supported sorts:
   * - name
   * - domain
   * - timezone
   * - subscription_type
   * - self_registration_enabled
   * - status
   * - created_at
   * - updated_at
   * </pre>
   *
   * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.github.vnworkday.proto.shared.v1.RequestSortOrBuilder> 
      getSortsOrBuilderList() {
    return sorts_;
  }
  /**
   * <pre>
   * Optional. Sorts to apply to the list of tenants.
   * If multiple sorts are specified, they are applied in the order given.
   * Supported sorts:
   * - name
   * - domain
   * - timezone
   * - subscription_type
   * - self_registration_enabled
   * - status
   * - created_at
   * - updated_at
   * </pre>
   *
   * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
   */
  @java.lang.Override
  public int getSortsCount() {
    return sorts_.size();
  }
  /**
   * <pre>
   * Optional. Sorts to apply to the list of tenants.
   * If multiple sorts are specified, they are applied in the order given.
   * Supported sorts:
   * - name
   * - domain
   * - timezone
   * - subscription_type
   * - self_registration_enabled
   * - status
   * - created_at
   * - updated_at
   * </pre>
   *
   * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
   */
  @java.lang.Override
  public com.github.vnworkday.proto.shared.v1.RequestSort getSorts(int index) {
    return sorts_.get(index);
  }
  /**
   * <pre>
   * Optional. Sorts to apply to the list of tenants.
   * If multiple sorts are specified, they are applied in the order given.
   * Supported sorts:
   * - name
   * - domain
   * - timezone
   * - subscription_type
   * - self_registration_enabled
   * - status
   * - created_at
   * - updated_at
   * </pre>
   *
   * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
   */
  @java.lang.Override
  public com.github.vnworkday.proto.shared.v1.RequestSortOrBuilder getSortsOrBuilder(
      int index) {
    return sorts_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeMessage(1, getInfo());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      output.writeMessage(2, getPagination());
    }
    for (int i = 0; i < filters_.size(); i++) {
      output.writeMessage(3, filters_.get(i));
    }
    for (int i = 0; i < sorts_.size(); i++) {
      output.writeMessage(4, sorts_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, getInfo());
    }
    if (((bitField0_ & 0x00000002) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, getPagination());
    }
    for (int i = 0; i < filters_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(3, filters_.get(i));
    }
    for (int i = 0; i < sorts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, sorts_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest)) {
      return super.equals(obj);
    }
    com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest other = (com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest) obj;

    if (hasInfo() != other.hasInfo()) return false;
    if (hasInfo()) {
      if (!getInfo()
          .equals(other.getInfo())) return false;
    }
    if (hasPagination() != other.hasPagination()) return false;
    if (hasPagination()) {
      if (!getPagination()
          .equals(other.getPagination())) return false;
    }
    if (!getFiltersList()
        .equals(other.getFiltersList())) return false;
    if (!getSortsList()
        .equals(other.getSortsList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (hasInfo()) {
      hash = (37 * hash) + INFO_FIELD_NUMBER;
      hash = (53 * hash) + getInfo().hashCode();
    }
    if (hasPagination()) {
      hash = (37 * hash) + PAGINATION_FIELD_NUMBER;
      hash = (53 * hash) + getPagination().hashCode();
    }
    if (getFiltersCount() > 0) {
      hash = (37 * hash) + FILTERS_FIELD_NUMBER;
      hash = (53 * hash) + getFiltersList().hashCode();
    }
    if (getSortsCount() > 0) {
      hash = (37 * hash) + SORTS_FIELD_NUMBER;
      hash = (53 * hash) + getSortsList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input);
  }

  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input);
  }
  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessage
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessage.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * <pre>
   * For listing tenants.
   * </pre>
   *
   * Protobuf type {@code account.tenant.v1.ListTenantsRequest}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessage.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:account.tenant.v1.ListTenantsRequest)
      com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequestOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.github.vnworkday.proto.account.tenant.v1.TenantServiceProto.internal_static_account_tenant_v1_ListTenantsRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.github.vnworkday.proto.account.tenant.v1.TenantServiceProto.internal_static_account_tenant_v1_ListTenantsRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest.class, com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest.Builder.class);
    }

    // Construct using com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessage
              .alwaysUseFieldBuilders) {
        getInfoFieldBuilder();
        getPaginationFieldBuilder();
        getFiltersFieldBuilder();
        getSortsFieldBuilder();
      }
    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      bitField0_ = 0;
      info_ = null;
      if (infoBuilder_ != null) {
        infoBuilder_.dispose();
        infoBuilder_ = null;
      }
      pagination_ = null;
      if (paginationBuilder_ != null) {
        paginationBuilder_.dispose();
        paginationBuilder_ = null;
      }
      if (filtersBuilder_ == null) {
        filters_ = java.util.Collections.emptyList();
      } else {
        filters_ = null;
        filtersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000004);
      if (sortsBuilder_ == null) {
        sorts_ = java.util.Collections.emptyList();
      } else {
        sorts_ = null;
        sortsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.github.vnworkday.proto.account.tenant.v1.TenantServiceProto.internal_static_account_tenant_v1_ListTenantsRequest_descriptor;
    }

    @java.lang.Override
    public com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest getDefaultInstanceForType() {
      return com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest.getDefaultInstance();
    }

    @java.lang.Override
    public com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest build() {
      com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest buildPartial() {
      com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest result = new com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest(this);
      buildPartialRepeatedFields(result);
      if (bitField0_ != 0) { buildPartial0(result); }
      onBuilt();
      return result;
    }

    private void buildPartialRepeatedFields(com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest result) {
      if (filtersBuilder_ == null) {
        if (((bitField0_ & 0x00000004) != 0)) {
          filters_ = java.util.Collections.unmodifiableList(filters_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.filters_ = filters_;
      } else {
        result.filters_ = filtersBuilder_.build();
      }
      if (sortsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          sorts_ = java.util.Collections.unmodifiableList(sorts_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.sorts_ = sorts_;
      } else {
        result.sorts_ = sortsBuilder_.build();
      }
    }

    private void buildPartial0(com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest result) {
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) != 0)) {
        result.info_ = infoBuilder_ == null
            ? info_
            : infoBuilder_.build();
        to_bitField0_ |= 0x00000001;
      }
      if (((from_bitField0_ & 0x00000002) != 0)) {
        result.pagination_ = paginationBuilder_ == null
            ? pagination_
            : paginationBuilder_.build();
        to_bitField0_ |= 0x00000002;
      }
      result.bitField0_ |= to_bitField0_;
    }

    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest) {
        return mergeFrom((com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest other) {
      if (other == com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest.getDefaultInstance()) return this;
      if (other.hasInfo()) {
        mergeInfo(other.getInfo());
      }
      if (other.hasPagination()) {
        mergePagination(other.getPagination());
      }
      if (filtersBuilder_ == null) {
        if (!other.filters_.isEmpty()) {
          if (filters_.isEmpty()) {
            filters_ = other.filters_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureFiltersIsMutable();
            filters_.addAll(other.filters_);
          }
          onChanged();
        }
      } else {
        if (!other.filters_.isEmpty()) {
          if (filtersBuilder_.isEmpty()) {
            filtersBuilder_.dispose();
            filtersBuilder_ = null;
            filters_ = other.filters_;
            bitField0_ = (bitField0_ & ~0x00000004);
            filtersBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getFiltersFieldBuilder() : null;
          } else {
            filtersBuilder_.addAllMessages(other.filters_);
          }
        }
      }
      if (sortsBuilder_ == null) {
        if (!other.sorts_.isEmpty()) {
          if (sorts_.isEmpty()) {
            sorts_ = other.sorts_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureSortsIsMutable();
            sorts_.addAll(other.sorts_);
          }
          onChanged();
        }
      } else {
        if (!other.sorts_.isEmpty()) {
          if (sortsBuilder_.isEmpty()) {
            sortsBuilder_.dispose();
            sortsBuilder_ = null;
            sorts_ = other.sorts_;
            bitField0_ = (bitField0_ & ~0x00000008);
            sortsBuilder_ = 
              com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                 getSortsFieldBuilder() : null;
          } else {
            sortsBuilder_.addAllMessages(other.sorts_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              input.readMessage(
                  getInfoFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000001;
              break;
            } // case 10
            case 18: {
              input.readMessage(
                  getPaginationFieldBuilder().getBuilder(),
                  extensionRegistry);
              bitField0_ |= 0x00000002;
              break;
            } // case 18
            case 26: {
              com.github.vnworkday.proto.shared.v1.RequestFilter m =
                  input.readMessage(
                      com.github.vnworkday.proto.shared.v1.RequestFilter.parser(),
                      extensionRegistry);
              if (filtersBuilder_ == null) {
                ensureFiltersIsMutable();
                filters_.add(m);
              } else {
                filtersBuilder_.addMessage(m);
              }
              break;
            } // case 26
            case 34: {
              com.github.vnworkday.proto.shared.v1.RequestSort m =
                  input.readMessage(
                      com.github.vnworkday.proto.shared.v1.RequestSort.parser(),
                      extensionRegistry);
              if (sortsBuilder_ == null) {
                ensureSortsIsMutable();
                sorts_.add(m);
              } else {
                sortsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.github.vnworkday.proto.shared.v1.RequestInfo info_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.vnworkday.proto.shared.v1.RequestInfo, com.github.vnworkday.proto.shared.v1.RequestInfo.Builder, com.github.vnworkday.proto.shared.v1.RequestInfoOrBuilder> infoBuilder_;
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     * @return Whether the info field is set.
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     * @return The info.
     */
    public com.github.vnworkday.proto.shared.v1.RequestInfo getInfo() {
      if (infoBuilder_ == null) {
        return info_ == null ? com.github.vnworkday.proto.shared.v1.RequestInfo.getDefaultInstance() : info_;
      } else {
        return infoBuilder_.getMessage();
      }
    }
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     */
    public Builder setInfo(com.github.vnworkday.proto.shared.v1.RequestInfo value) {
      if (infoBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        info_ = value;
      } else {
        infoBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     */
    public Builder setInfo(
        com.github.vnworkday.proto.shared.v1.RequestInfo.Builder builderForValue) {
      if (infoBuilder_ == null) {
        info_ = builderForValue.build();
      } else {
        infoBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000001;
      onChanged();
      return this;
    }
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     */
    public Builder mergeInfo(com.github.vnworkday.proto.shared.v1.RequestInfo value) {
      if (infoBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0) &&
          info_ != null &&
          info_ != com.github.vnworkday.proto.shared.v1.RequestInfo.getDefaultInstance()) {
          getInfoBuilder().mergeFrom(value);
        } else {
          info_ = value;
        }
      } else {
        infoBuilder_.mergeFrom(value);
      }
      if (info_ != null) {
        bitField0_ |= 0x00000001;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     */
    public Builder clearInfo() {
      bitField0_ = (bitField0_ & ~0x00000001);
      info_ = null;
      if (infoBuilder_ != null) {
        infoBuilder_.dispose();
        infoBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestInfo.Builder getInfoBuilder() {
      bitField0_ |= 0x00000001;
      onChanged();
      return getInfoFieldBuilder().getBuilder();
    }
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestInfoOrBuilder getInfoOrBuilder() {
      if (infoBuilder_ != null) {
        return infoBuilder_.getMessageOrBuilder();
      } else {
        return info_ == null ?
            com.github.vnworkday.proto.shared.v1.RequestInfo.getDefaultInstance() : info_;
      }
    }
    /**
     * <code>.shared.v1.RequestInfo info = 1 [json_name = "info"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.vnworkday.proto.shared.v1.RequestInfo, com.github.vnworkday.proto.shared.v1.RequestInfo.Builder, com.github.vnworkday.proto.shared.v1.RequestInfoOrBuilder> 
        getInfoFieldBuilder() {
      if (infoBuilder_ == null) {
        infoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.vnworkday.proto.shared.v1.RequestInfo, com.github.vnworkday.proto.shared.v1.RequestInfo.Builder, com.github.vnworkday.proto.shared.v1.RequestInfoOrBuilder>(
                getInfo(),
                getParentForChildren(),
                isClean());
        info_ = null;
      }
      return infoBuilder_;
    }

    private com.github.vnworkday.proto.shared.v1.RequestPagination pagination_;
    private com.google.protobuf.SingleFieldBuilder<
        com.github.vnworkday.proto.shared.v1.RequestPagination, com.github.vnworkday.proto.shared.v1.RequestPagination.Builder, com.github.vnworkday.proto.shared.v1.RequestPaginationOrBuilder> paginationBuilder_;
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     * @return Whether the pagination field is set.
     */
    public boolean hasPagination() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     * @return The pagination.
     */
    public com.github.vnworkday.proto.shared.v1.RequestPagination getPagination() {
      if (paginationBuilder_ == null) {
        return pagination_ == null ? com.github.vnworkday.proto.shared.v1.RequestPagination.getDefaultInstance() : pagination_;
      } else {
        return paginationBuilder_.getMessage();
      }
    }
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     */
    public Builder setPagination(com.github.vnworkday.proto.shared.v1.RequestPagination value) {
      if (paginationBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        pagination_ = value;
      } else {
        paginationBuilder_.setMessage(value);
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     */
    public Builder setPagination(
        com.github.vnworkday.proto.shared.v1.RequestPagination.Builder builderForValue) {
      if (paginationBuilder_ == null) {
        pagination_ = builderForValue.build();
      } else {
        paginationBuilder_.setMessage(builderForValue.build());
      }
      bitField0_ |= 0x00000002;
      onChanged();
      return this;
    }
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     */
    public Builder mergePagination(com.github.vnworkday.proto.shared.v1.RequestPagination value) {
      if (paginationBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0) &&
          pagination_ != null &&
          pagination_ != com.github.vnworkday.proto.shared.v1.RequestPagination.getDefaultInstance()) {
          getPaginationBuilder().mergeFrom(value);
        } else {
          pagination_ = value;
        }
      } else {
        paginationBuilder_.mergeFrom(value);
      }
      if (pagination_ != null) {
        bitField0_ |= 0x00000002;
        onChanged();
      }
      return this;
    }
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     */
    public Builder clearPagination() {
      bitField0_ = (bitField0_ & ~0x00000002);
      pagination_ = null;
      if (paginationBuilder_ != null) {
        paginationBuilder_.dispose();
        paginationBuilder_ = null;
      }
      onChanged();
      return this;
    }
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestPagination.Builder getPaginationBuilder() {
      bitField0_ |= 0x00000002;
      onChanged();
      return getPaginationFieldBuilder().getBuilder();
    }
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestPaginationOrBuilder getPaginationOrBuilder() {
      if (paginationBuilder_ != null) {
        return paginationBuilder_.getMessageOrBuilder();
      } else {
        return pagination_ == null ?
            com.github.vnworkday.proto.shared.v1.RequestPagination.getDefaultInstance() : pagination_;
      }
    }
    /**
     * <code>.shared.v1.RequestPagination pagination = 2 [json_name = "pagination"];</code>
     */
    private com.google.protobuf.SingleFieldBuilder<
        com.github.vnworkday.proto.shared.v1.RequestPagination, com.github.vnworkday.proto.shared.v1.RequestPagination.Builder, com.github.vnworkday.proto.shared.v1.RequestPaginationOrBuilder> 
        getPaginationFieldBuilder() {
      if (paginationBuilder_ == null) {
        paginationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
            com.github.vnworkday.proto.shared.v1.RequestPagination, com.github.vnworkday.proto.shared.v1.RequestPagination.Builder, com.github.vnworkday.proto.shared.v1.RequestPaginationOrBuilder>(
                getPagination(),
                getParentForChildren(),
                isClean());
        pagination_ = null;
      }
      return paginationBuilder_;
    }

    private java.util.List<com.github.vnworkday.proto.shared.v1.RequestFilter> filters_ =
      java.util.Collections.emptyList();
    private void ensureFiltersIsMutable() {
      if (!((bitField0_ & 0x00000004) != 0)) {
        filters_ = new java.util.ArrayList<com.github.vnworkday.proto.shared.v1.RequestFilter>(filters_);
        bitField0_ |= 0x00000004;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.vnworkday.proto.shared.v1.RequestFilter, com.github.vnworkday.proto.shared.v1.RequestFilter.Builder, com.github.vnworkday.proto.shared.v1.RequestFilterOrBuilder> filtersBuilder_;

    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public java.util.List<com.github.vnworkday.proto.shared.v1.RequestFilter> getFiltersList() {
      if (filtersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(filters_);
      } else {
        return filtersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public int getFiltersCount() {
      if (filtersBuilder_ == null) {
        return filters_.size();
      } else {
        return filtersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestFilter getFilters(int index) {
      if (filtersBuilder_ == null) {
        return filters_.get(index);
      } else {
        return filtersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder setFilters(
        int index, com.github.vnworkday.proto.shared.v1.RequestFilter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.set(index, value);
        onChanged();
      } else {
        filtersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder setFilters(
        int index, com.github.vnworkday.proto.shared.v1.RequestFilter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.set(index, builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder addFilters(com.github.vnworkday.proto.shared.v1.RequestFilter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.add(value);
        onChanged();
      } else {
        filtersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder addFilters(
        int index, com.github.vnworkday.proto.shared.v1.RequestFilter value) {
      if (filtersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureFiltersIsMutable();
        filters_.add(index, value);
        onChanged();
      } else {
        filtersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder addFilters(
        com.github.vnworkday.proto.shared.v1.RequestFilter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.add(builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder addFilters(
        int index, com.github.vnworkday.proto.shared.v1.RequestFilter.Builder builderForValue) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.add(index, builderForValue.build());
        onChanged();
      } else {
        filtersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder addAllFilters(
        java.lang.Iterable<? extends com.github.vnworkday.proto.shared.v1.RequestFilter> values) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, filters_);
        onChanged();
      } else {
        filtersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder clearFilters() {
      if (filtersBuilder_ == null) {
        filters_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
      } else {
        filtersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public Builder removeFilters(int index) {
      if (filtersBuilder_ == null) {
        ensureFiltersIsMutable();
        filters_.remove(index);
        onChanged();
      } else {
        filtersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestFilter.Builder getFiltersBuilder(
        int index) {
      return getFiltersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestFilterOrBuilder getFiltersOrBuilder(
        int index) {
      if (filtersBuilder_ == null) {
        return filters_.get(index);  } else {
        return filtersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public java.util.List<? extends com.github.vnworkday.proto.shared.v1.RequestFilterOrBuilder> 
         getFiltersOrBuilderList() {
      if (filtersBuilder_ != null) {
        return filtersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(filters_);
      }
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestFilter.Builder addFiltersBuilder() {
      return getFiltersFieldBuilder().addBuilder(
          com.github.vnworkday.proto.shared.v1.RequestFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestFilter.Builder addFiltersBuilder(
        int index) {
      return getFiltersFieldBuilder().addBuilder(
          index, com.github.vnworkday.proto.shared.v1.RequestFilter.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional. Filters to apply to the list of tenants.
     * If multiple filters are specified, they are combined with AND.
     * Supported filters:
     * - name: The name of the tenant.
     * - domain: The domain of the tenant.
     * - timezone: The timezone of the tenant.
     * - subscription_type: The subscription type of the tenant.
     * - self_registration_enabled: Whether self-registration is enabled for the tenant.
     * - status: The status of the tenant.
     * </pre>
     *
     * <code>repeated .shared.v1.RequestFilter filters = 3 [json_name = "filters"];</code>
     */
    public java.util.List<com.github.vnworkday.proto.shared.v1.RequestFilter.Builder> 
         getFiltersBuilderList() {
      return getFiltersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.vnworkday.proto.shared.v1.RequestFilter, com.github.vnworkday.proto.shared.v1.RequestFilter.Builder, com.github.vnworkday.proto.shared.v1.RequestFilterOrBuilder> 
        getFiltersFieldBuilder() {
      if (filtersBuilder_ == null) {
        filtersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.github.vnworkday.proto.shared.v1.RequestFilter, com.github.vnworkday.proto.shared.v1.RequestFilter.Builder, com.github.vnworkday.proto.shared.v1.RequestFilterOrBuilder>(
                filters_,
                ((bitField0_ & 0x00000004) != 0),
                getParentForChildren(),
                isClean());
        filters_ = null;
      }
      return filtersBuilder_;
    }

    private java.util.List<com.github.vnworkday.proto.shared.v1.RequestSort> sorts_ =
      java.util.Collections.emptyList();
    private void ensureSortsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        sorts_ = new java.util.ArrayList<com.github.vnworkday.proto.shared.v1.RequestSort>(sorts_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.vnworkday.proto.shared.v1.RequestSort, com.github.vnworkday.proto.shared.v1.RequestSort.Builder, com.github.vnworkday.proto.shared.v1.RequestSortOrBuilder> sortsBuilder_;

    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public java.util.List<com.github.vnworkday.proto.shared.v1.RequestSort> getSortsList() {
      if (sortsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(sorts_);
      } else {
        return sortsBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public int getSortsCount() {
      if (sortsBuilder_ == null) {
        return sorts_.size();
      } else {
        return sortsBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestSort getSorts(int index) {
      if (sortsBuilder_ == null) {
        return sorts_.get(index);
      } else {
        return sortsBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder setSorts(
        int index, com.github.vnworkday.proto.shared.v1.RequestSort value) {
      if (sortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortsIsMutable();
        sorts_.set(index, value);
        onChanged();
      } else {
        sortsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder setSorts(
        int index, com.github.vnworkday.proto.shared.v1.RequestSort.Builder builderForValue) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        sorts_.set(index, builderForValue.build());
        onChanged();
      } else {
        sortsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder addSorts(com.github.vnworkday.proto.shared.v1.RequestSort value) {
      if (sortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortsIsMutable();
        sorts_.add(value);
        onChanged();
      } else {
        sortsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder addSorts(
        int index, com.github.vnworkday.proto.shared.v1.RequestSort value) {
      if (sortsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureSortsIsMutable();
        sorts_.add(index, value);
        onChanged();
      } else {
        sortsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder addSorts(
        com.github.vnworkday.proto.shared.v1.RequestSort.Builder builderForValue) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        sorts_.add(builderForValue.build());
        onChanged();
      } else {
        sortsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder addSorts(
        int index, com.github.vnworkday.proto.shared.v1.RequestSort.Builder builderForValue) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        sorts_.add(index, builderForValue.build());
        onChanged();
      } else {
        sortsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder addAllSorts(
        java.lang.Iterable<? extends com.github.vnworkday.proto.shared.v1.RequestSort> values) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, sorts_);
        onChanged();
      } else {
        sortsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder clearSorts() {
      if (sortsBuilder_ == null) {
        sorts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        sortsBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public Builder removeSorts(int index) {
      if (sortsBuilder_ == null) {
        ensureSortsIsMutable();
        sorts_.remove(index);
        onChanged();
      } else {
        sortsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestSort.Builder getSortsBuilder(
        int index) {
      return getSortsFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestSortOrBuilder getSortsOrBuilder(
        int index) {
      if (sortsBuilder_ == null) {
        return sorts_.get(index);  } else {
        return sortsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public java.util.List<? extends com.github.vnworkday.proto.shared.v1.RequestSortOrBuilder> 
         getSortsOrBuilderList() {
      if (sortsBuilder_ != null) {
        return sortsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(sorts_);
      }
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestSort.Builder addSortsBuilder() {
      return getSortsFieldBuilder().addBuilder(
          com.github.vnworkday.proto.shared.v1.RequestSort.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public com.github.vnworkday.proto.shared.v1.RequestSort.Builder addSortsBuilder(
        int index) {
      return getSortsFieldBuilder().addBuilder(
          index, com.github.vnworkday.proto.shared.v1.RequestSort.getDefaultInstance());
    }
    /**
     * <pre>
     * Optional. Sorts to apply to the list of tenants.
     * If multiple sorts are specified, they are applied in the order given.
     * Supported sorts:
     * - name
     * - domain
     * - timezone
     * - subscription_type
     * - self_registration_enabled
     * - status
     * - created_at
     * - updated_at
     * </pre>
     *
     * <code>repeated .shared.v1.RequestSort sorts = 4 [json_name = "sorts"];</code>
     */
    public java.util.List<com.github.vnworkday.proto.shared.v1.RequestSort.Builder> 
         getSortsBuilderList() {
      return getSortsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilder<
        com.github.vnworkday.proto.shared.v1.RequestSort, com.github.vnworkday.proto.shared.v1.RequestSort.Builder, com.github.vnworkday.proto.shared.v1.RequestSortOrBuilder> 
        getSortsFieldBuilder() {
      if (sortsBuilder_ == null) {
        sortsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
            com.github.vnworkday.proto.shared.v1.RequestSort, com.github.vnworkday.proto.shared.v1.RequestSort.Builder, com.github.vnworkday.proto.shared.v1.RequestSortOrBuilder>(
                sorts_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        sorts_ = null;
      }
      return sortsBuilder_;
    }

    // @@protoc_insertion_point(builder_scope:account.tenant.v1.ListTenantsRequest)
  }

  // @@protoc_insertion_point(class_scope:account.tenant.v1.ListTenantsRequest)
  private static final com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest();
  }

  public static com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<ListTenantsRequest>
      PARSER = new com.google.protobuf.AbstractParser<ListTenantsRequest>() {
    @java.lang.Override
    public ListTenantsRequest parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<ListTenantsRequest> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<ListTenantsRequest> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.github.vnworkday.proto.account.tenant.v1.ListTenantsRequest getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

