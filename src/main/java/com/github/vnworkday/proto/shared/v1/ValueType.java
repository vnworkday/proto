// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: shared/v1/request.proto
// Protobuf Java Version: 4.27.0

package com.github.vnworkday.proto.shared.v1;

/**
 * Protobuf enum {@code shared.v1.ValueType}
 */
public enum ValueType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>VALUE_TYPE_UNSPECIFIED = 0;</code>
   */
  VALUE_TYPE_UNSPECIFIED(0),
  /**
   * <pre>
   * String. Default.
   * </pre>
   *
   * <code>VALUE_TYPE_STRING = 1;</code>
   */
  VALUE_TYPE_STRING(1),
  /**
   * <pre>
   * Integer. In the format of '123' or '-123'.
   * </pre>
   *
   * <code>VALUE_TYPE_INTEGER = 2;</code>
   */
  VALUE_TYPE_INTEGER(2),
  /**
   * <pre>
   * Float. In the format of '123.45'.
   * </pre>
   *
   * <code>VALUE_TYPE_FLOAT = 3;</code>
   */
  VALUE_TYPE_FLOAT(3),
  /**
   * <pre>
   * Boolean. In the format of 'true' or 'false'.
   * </pre>
   *
   * <code>VALUE_TYPE_BOOLEAN = 4;</code>
   */
  VALUE_TYPE_BOOLEAN(4),
  /**
   * <pre>
   * Date. In the format of 'YYYY-MM-DD'.
   * </pre>
   *
   * <code>VALUE_TYPE_DATE = 5;</code>
   */
  VALUE_TYPE_DATE(5),
  /**
   * <pre>
   * Time. In the format of 'HH:MM:SS'.
   * </pre>
   *
   * <code>VALUE_TYPE_TIME = 6;</code>
   */
  VALUE_TYPE_TIME(6),
  /**
   * <pre>
   * Datetime. In the format of 'YYYY-MM-DDTHH:MM:SS'.
   * </pre>
   *
   * <code>VALUE_TYPE_DATETIME = 7;</code>
   */
  VALUE_TYPE_DATETIME(7),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 0,
      /* suffix= */ "",
      ValueType.class.getName());
  }
  /**
   * <code>VALUE_TYPE_UNSPECIFIED = 0;</code>
   */
  public static final int VALUE_TYPE_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * String. Default.
   * </pre>
   *
   * <code>VALUE_TYPE_STRING = 1;</code>
   */
  public static final int VALUE_TYPE_STRING_VALUE = 1;
  /**
   * <pre>
   * Integer. In the format of '123' or '-123'.
   * </pre>
   *
   * <code>VALUE_TYPE_INTEGER = 2;</code>
   */
  public static final int VALUE_TYPE_INTEGER_VALUE = 2;
  /**
   * <pre>
   * Float. In the format of '123.45'.
   * </pre>
   *
   * <code>VALUE_TYPE_FLOAT = 3;</code>
   */
  public static final int VALUE_TYPE_FLOAT_VALUE = 3;
  /**
   * <pre>
   * Boolean. In the format of 'true' or 'false'.
   * </pre>
   *
   * <code>VALUE_TYPE_BOOLEAN = 4;</code>
   */
  public static final int VALUE_TYPE_BOOLEAN_VALUE = 4;
  /**
   * <pre>
   * Date. In the format of 'YYYY-MM-DD'.
   * </pre>
   *
   * <code>VALUE_TYPE_DATE = 5;</code>
   */
  public static final int VALUE_TYPE_DATE_VALUE = 5;
  /**
   * <pre>
   * Time. In the format of 'HH:MM:SS'.
   * </pre>
   *
   * <code>VALUE_TYPE_TIME = 6;</code>
   */
  public static final int VALUE_TYPE_TIME_VALUE = 6;
  /**
   * <pre>
   * Datetime. In the format of 'YYYY-MM-DDTHH:MM:SS'.
   * </pre>
   *
   * <code>VALUE_TYPE_DATETIME = 7;</code>
   */
  public static final int VALUE_TYPE_DATETIME_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static ValueType valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static ValueType forNumber(int value) {
    switch (value) {
      case 0: return VALUE_TYPE_UNSPECIFIED;
      case 1: return VALUE_TYPE_STRING;
      case 2: return VALUE_TYPE_INTEGER;
      case 3: return VALUE_TYPE_FLOAT;
      case 4: return VALUE_TYPE_BOOLEAN;
      case 5: return VALUE_TYPE_DATE;
      case 6: return VALUE_TYPE_TIME;
      case 7: return VALUE_TYPE_DATETIME;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<ValueType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      ValueType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<ValueType>() {
          public ValueType findValueByNumber(int number) {
            return ValueType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.github.vnworkday.proto.shared.v1.RequestProto.getDescriptor().getEnumTypes().get(1);
  }

  private static final ValueType[] VALUES = values();

  public static ValueType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private ValueType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:shared.v1.ValueType)
}

