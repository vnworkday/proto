// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: shared/v1/request.proto
// Protobuf Java Version: 4.27.0

package com.github.vnworkday.proto.shared.v1;

/**
 * <pre>
 * Operator for filtering, aggregating, or calculating.
 * </pre>
 *
 * Protobuf enum {@code shared.v1.Operator}
 */
public enum Operator
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>OPERATOR_UNSPECIFIED = 0;</code>
   */
  OPERATOR_UNSPECIFIED(0),
  /**
   * <pre>
   * Equal.
   * </pre>
   *
   * <code>OPERATOR_EQ = 1;</code>
   */
  OPERATOR_EQ(1),
  /**
   * <pre>
   * Not equal.
   * </pre>
   *
   * <code>OPERATOR_NOT_EQ = 2;</code>
   */
  OPERATOR_NOT_EQ(2),
  /**
   * <pre>
   * Greater than.
   * </pre>
   *
   * <code>OPERATOR_GT = 3;</code>
   */
  OPERATOR_GT(3),
  /**
   * <pre>
   * Less than.
   * </pre>
   *
   * <code>OPERATOR_LT = 4;</code>
   */
  OPERATOR_LT(4),
  /**
   * <pre>
   * Greater than or equal.
   * </pre>
   *
   * <code>OPERATOR_GE = 5;</code>
   */
  OPERATOR_GE(5),
  /**
   * <pre>
   * Less than or equal.
   * </pre>
   *
   * <code>OPERATOR_LE = 6;</code>
   */
  OPERATOR_LE(6),
  /**
   * <pre>
   * In.
   * </pre>
   *
   * <code>OPERATOR_IN = 7;</code>
   */
  OPERATOR_IN(7),
  /**
   * <pre>
   * Not in.
   * </pre>
   *
   * <code>OPERATOR_NOT_IN = 8;</code>
   */
  OPERATOR_NOT_IN(8),
  /**
   * <pre>
   * Contains.
   * </pre>
   *
   * <code>OPERATOR_CONTAINS = 9;</code>
   */
  OPERATOR_CONTAINS(9),
  /**
   * <pre>
   * Not contains.
   * </pre>
   *
   * <code>OPERATOR_NOT_CONTAINS = 10;</code>
   */
  OPERATOR_NOT_CONTAINS(10),
  /**
   * <pre>
   * Starts with.
   * </pre>
   *
   * <code>OPERATOR_STARTS_WITH = 11;</code>
   */
  OPERATOR_STARTS_WITH(11),
  /**
   * <pre>
   * Ends with.
   * </pre>
   *
   * <code>OPERATOR_ENDS_WITH = 12;</code>
   */
  OPERATOR_ENDS_WITH(12),
  /**
   * <pre>
   * Is null.
   * </pre>
   *
   * <code>OPERATOR_NULL = 13;</code>
   */
  OPERATOR_NULL(13),
  /**
   * <pre>
   * Is not null.
   * </pre>
   *
   * <code>OPERATOR_NOT_NULL = 14;</code>
   */
  OPERATOR_NOT_NULL(14),
  /**
   * <pre>
   * Between.
   * </pre>
   *
   * <code>OPERATOR_BETWEEN = 15;</code>
   */
  OPERATOR_BETWEEN(15),
  UNRECOGNIZED(-1),
  ;

  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 27,
      /* patch= */ 0,
      /* suffix= */ "",
      Operator.class.getName());
  }
  /**
   * <code>OPERATOR_UNSPECIFIED = 0;</code>
   */
  public static final int OPERATOR_UNSPECIFIED_VALUE = 0;
  /**
   * <pre>
   * Equal.
   * </pre>
   *
   * <code>OPERATOR_EQ = 1;</code>
   */
  public static final int OPERATOR_EQ_VALUE = 1;
  /**
   * <pre>
   * Not equal.
   * </pre>
   *
   * <code>OPERATOR_NOT_EQ = 2;</code>
   */
  public static final int OPERATOR_NOT_EQ_VALUE = 2;
  /**
   * <pre>
   * Greater than.
   * </pre>
   *
   * <code>OPERATOR_GT = 3;</code>
   */
  public static final int OPERATOR_GT_VALUE = 3;
  /**
   * <pre>
   * Less than.
   * </pre>
   *
   * <code>OPERATOR_LT = 4;</code>
   */
  public static final int OPERATOR_LT_VALUE = 4;
  /**
   * <pre>
   * Greater than or equal.
   * </pre>
   *
   * <code>OPERATOR_GE = 5;</code>
   */
  public static final int OPERATOR_GE_VALUE = 5;
  /**
   * <pre>
   * Less than or equal.
   * </pre>
   *
   * <code>OPERATOR_LE = 6;</code>
   */
  public static final int OPERATOR_LE_VALUE = 6;
  /**
   * <pre>
   * In.
   * </pre>
   *
   * <code>OPERATOR_IN = 7;</code>
   */
  public static final int OPERATOR_IN_VALUE = 7;
  /**
   * <pre>
   * Not in.
   * </pre>
   *
   * <code>OPERATOR_NOT_IN = 8;</code>
   */
  public static final int OPERATOR_NOT_IN_VALUE = 8;
  /**
   * <pre>
   * Contains.
   * </pre>
   *
   * <code>OPERATOR_CONTAINS = 9;</code>
   */
  public static final int OPERATOR_CONTAINS_VALUE = 9;
  /**
   * <pre>
   * Not contains.
   * </pre>
   *
   * <code>OPERATOR_NOT_CONTAINS = 10;</code>
   */
  public static final int OPERATOR_NOT_CONTAINS_VALUE = 10;
  /**
   * <pre>
   * Starts with.
   * </pre>
   *
   * <code>OPERATOR_STARTS_WITH = 11;</code>
   */
  public static final int OPERATOR_STARTS_WITH_VALUE = 11;
  /**
   * <pre>
   * Ends with.
   * </pre>
   *
   * <code>OPERATOR_ENDS_WITH = 12;</code>
   */
  public static final int OPERATOR_ENDS_WITH_VALUE = 12;
  /**
   * <pre>
   * Is null.
   * </pre>
   *
   * <code>OPERATOR_NULL = 13;</code>
   */
  public static final int OPERATOR_NULL_VALUE = 13;
  /**
   * <pre>
   * Is not null.
   * </pre>
   *
   * <code>OPERATOR_NOT_NULL = 14;</code>
   */
  public static final int OPERATOR_NOT_NULL_VALUE = 14;
  /**
   * <pre>
   * Between.
   * </pre>
   *
   * <code>OPERATOR_BETWEEN = 15;</code>
   */
  public static final int OPERATOR_BETWEEN_VALUE = 15;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static Operator valueOf(int value) {
    return forNumber(value);
  }

  /**
   * @param value The numeric wire value of the corresponding enum entry.
   * @return The enum associated with the given numeric wire value.
   */
  public static Operator forNumber(int value) {
    switch (value) {
      case 0: return OPERATOR_UNSPECIFIED;
      case 1: return OPERATOR_EQ;
      case 2: return OPERATOR_NOT_EQ;
      case 3: return OPERATOR_GT;
      case 4: return OPERATOR_LT;
      case 5: return OPERATOR_GE;
      case 6: return OPERATOR_LE;
      case 7: return OPERATOR_IN;
      case 8: return OPERATOR_NOT_IN;
      case 9: return OPERATOR_CONTAINS;
      case 10: return OPERATOR_NOT_CONTAINS;
      case 11: return OPERATOR_STARTS_WITH;
      case 12: return OPERATOR_ENDS_WITH;
      case 13: return OPERATOR_NULL;
      case 14: return OPERATOR_NOT_NULL;
      case 15: return OPERATOR_BETWEEN;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<Operator>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      Operator> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<Operator>() {
          public Operator findValueByNumber(int number) {
            return Operator.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    if (this == UNRECOGNIZED) {
      throw new java.lang.IllegalStateException(
          "Can't get the descriptor of an unrecognized enum value.");
    }
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return com.github.vnworkday.proto.shared.v1.RequestProto.getDescriptor().getEnumTypes().get(0);
  }

  private static final Operator[] VALUES = values();

  public static Operator valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private Operator(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:shared.v1.Operator)
}

